<ul>
     <li><strong>Enfoque Basado en Datos:</strong> El análisis y las sugerencias de cartera se basan en datos históricos del mercado.</li>
    <li><strong>Configuración Flexible:</strong> Utiliza archivos de texto externos simples (<code>downpar.txt</code>, <code>simpar.txt</code>) para permitirte ajustar fácilmente configuraciones como la lista de acciones a considerar (ej: tu lista ESG elegida), el rango de fechas, límites de tamaño de la cartera, tasa libre de riesgo y parámetros de optimización sin cambiar el código Python.</li>
    <li><strong>Foco en el Rendimiento Ajustado al Riesgo:</strong> El objetivo principal es encontrar carteras que ofrezcan un buen equilibrio entre el rendimiento potencial y el riesgo, utilizando el Ratio de Sharpe como métrica principal.</li>
    <li><strong>Métodos de Optimización Híbridos:</strong>
        <ul>
            <li>Combina una búsqueda por <strong>Fuerza Bruta</strong> más completa para carteras más pequeñas.</li>
            <li>Cambia a un <strong>Algoritmo Genético (AG)</strong> para carteras más grandes para encontrar buenas soluciones de forma más eficiente.</li>
            <li>Usa <strong>simulaciones de Monte Carlo</strong> para evaluar el rendimiento potencial de diferentes combinaciones de acciones con varias ponderaciones.</li>
        </ul>
    </li>
    <li><strong>Lógica de Simulación Adaptativa:</strong> Incluye características para acelerar potencialmente el proceso, concentrando el esfuerzo computacional donde es más probable encontrar mejores resultados.</li>
    <li><strong>Registro Detallado y Monitorización Web:</strong> Proporciona varios registros para entender la ejecución del script, seguir el progreso y revisar el rendimiento. Las actualizaciones de estado clave y los resultados también están disponibles a través de una interfaz web (servida por Apache en una Raspberry Pi en mi configuración) para monitorización en vivo y fácil acceso a los resultados.
        <ul>
            <li>Registros de texto estándar para progreso general y errores.</li>
            <li>Registros de rendimiento para ver cuánto tiempo tomaron diferentes partes del proceso.</li>
            <li>Archivos JSON (<code>progress.json</code>) y CSV accesibles por web para contenido dinámico en las páginas de monitorización HTML.</li>
            <li>Archivos CSV que contienen los detalles de la mejor cartera encontrada, su valor histórico durante el período de datos y datos relacionados con la ejecución del Algoritmo Genético.</li>
        </ul>
    </li>
    <li><strong>Estructura Modular:</strong> Separar el manejo de datos de la lógica de optimización hace que el código sea más fácil de entender, modificar y potencialmente extender.</li>
    <li><strong>Conocimiento del Calendario del Mercado:</strong> El script de descarga de datos considera festivos específicos del mercado y días hábiles para una recopilación de datos históricos más precisa.</li>
    <li><strong>Obtención de Datos Robusta:</strong> Incluye características como reintentos y rotación de user-agent para manejar posibles problemas al descargar datos de fuentes en línea.</li>
</ul>
<p>Estas funcionalidades, incluyendo la optimización para ejecutarse en una Raspberry Pi 3B, son parte de mi desarrollo y exploración continuos en esta área.</p>