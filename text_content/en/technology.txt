<p>This project is built using Python, leveraging several standard libraries commonly used in data analysis and scientific computing. Here are some of the key technologies and concepts involved:</p>
<ul>
    <li><strong>Core Language:</strong> Python 3.x</li>
    <li><strong>Data Handling & External Interaction:</strong>
        <ul>
            <li><code>yfinance</code>: Used to fetch historical stock data.</li>
            <li><code>requests</code>: For managing HTTP connections, including handling retries for more reliable data fetching.</li>
            <li><code>fake_useragent</code>: Helps in generating user agents for requests, which can be useful when interacting with web sources.</li>
            <li><code>holidays</code>: Used to identify specific market holidays, ensuring data is collected for actual trading days.</li>
        </ul>
    </li>
    <li><strong>Data Manipulation & Analysis:</strong>
        <ul>
            <li><code>pandas</code>: This is fundamental for handling and manipulating the financial data, including reading/writing CSVs and time-series operations.</li>
            <li><code>numpy</code>: Used for numerical computations, particularly in the mathematical calculations for portfolio performance (returns, volatility).</li>
        </ul>
    </li>
    <li><strong>Optimization & Algorithms:</strong>
        <ul>
            <li>The project implements concepts from <strong>Modern Portfolio Theory (MPT)</strong>.</li>
            <li><strong>Monte Carlo Simulation</strong> is used to evaluate potential portfolio performance by trying random weightings.</li>
            <li>A custom <strong>Brute-Force</strong> search is implemented for smaller portfolio sizes.</li>
            <li>A custom <strong>Genetic Algorithm (GA)</strong> is used as a heuristic search method for larger portfolio sizes, including basic implementations of selection, crossover, and mutation.</li>
        </ul>
    </li>
    <li><strong>Code Structure & Utilities:</strong>
        <ul>
            <li><strong>Object-Oriented Programming (OOP):</strong> Used for classes like <code>Logger</code> and <code>ExecutionTimer</code> to encapsulate functionality.</li>
            <li><strong>Parameterization:</strong> External configuration files (<code>.txt</code>) for easy adjustment of script behavior without code changes.</li>
            <li><strong>Logging:</strong> Custom logger for detailed console output, file logging, and JSON updates for web-based progress monitoring.</li>
            <li><code>json</code>: For reading/writing JSON data, particularly for progress updates and skip lists.</li>
            <li><code>datetime</code>, <code>time</code>: For handling dates, times, and performance measurements.</li>
            <li><code>os</code>, <code>shutil</code>: For file and directory operations.</li>
            <li><code>itertools</code>, <code>math</code>: For combinatorial calculations and mathematical functions.</li>
        </ul>
    </li>
</ul>
<p>The design focuses on keeping the data handling separate from the analysis engine, aiming for a clear and modular structure that is easier to understand and potentially modify.</p>

