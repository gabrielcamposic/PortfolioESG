<ul>
    <li><strong>Data-Driven Approach:</strong> The analysis and portfolio suggestions are based on historical market data.</li>
    <li><strong>Flexible Configuration:</strong> Uses simple external text files (<code>downpar.txt</code>, <code>simpar.txt</code>) to let you easily adjust settings like the list of stocks to consider (e.g., your chosen ESG list), the date range, portfolio size limits, risk-free rate, and optimization parameters without changing the Python code itself.</li>
    <li><strong>Focus on Risk-Adjusted Return:</strong> The primary goal is to find portfolios that offer a good balance between potential return and risk, using the Sharpe Ratio as the main metric.</li>
    <li><strong>Hybrid Optimization Methods:</strong>
        <ul>
            <li>Combines a more thorough <strong>Brute-Force</strong> search for smaller portfolios.</li>
            <li>Switches to a <strong>Genetic Algorithm (GA)</strong> for larger portfolios to find good solutions more efficiently.</li>
            <li>Uses <strong>Monte Carlo simulations</strong> to evaluate the potential performance of different stock combinations with various weightings.</li>
        </ul>
    </li>
    <li><strong>Adaptive Simulation Logic:</strong> Includes features to potentially speed up the process by focusing computational effort where it's most likely to find better results.</li>
    <li><strong>Detailed Logging & Web Monitoring:</strong> Provides various logs for understanding script execution, tracking progress, and reviewing performance. Key status updates and results are also made available via a web interface (served by Apache on a Raspberry Pi in my setup) for live monitoring and easy access to outcomes.
        <ul>
            <li>Standard text logs for general progress and errors.</li>
            <li>Performance logs to see how long different parts of the process took.</li>
            <li>Web-accessible JSON (<code>progress.json</code>) and CSV files for dynamic content on HTML monitoring pages.</li>
            <li>CSV files containing the details of the best portfolio found, its historical value over the data period, and data related to the Genetic Algorithm's run.</li>
        </ul>
    </li>
    <li><strong>Modular Structure:</strong> Separating data handling from the optimization logic makes the code easier to understand, modify, and potentially extend.</li>
    <li><strong>Market Calendar Awareness:</strong> The data download script considers specific market holidays and business days for more accurate data collection.</li>
    <li><strong>Robust Data Fetching:</strong> Includes features like retries and user agent rotation to handle potential issues when downloading data from online sources.</li>
</ul>
<p>These features, including the optimization for running on a Raspberry Pi 3B, are part of my ongoing development and exploration in this area.</p>
